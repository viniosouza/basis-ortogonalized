# -*- coding: utf-8 -*-
"""algebra1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rA0mUEbfX8dbOeNSEIqA5baZSxy2Z8RA
"""

import numpy as np
from numpy import*
import sympy as sp
from sympy.matrices import GramSchmidt, Matrix



print('**************************************************************************')

#qtde_elementos = int(input('Insira a quantidade de elementos do arrays dentro: '))

qtde_arrays = int(input('Insira a quantidade de vetores: '))


v1 = []
v2 = []
v3 = []
v4 = []
v5 = []



while(qtde_arrays > 5 or qtde_arrays <1):
  print("O maximo de vetores = 5 e o minimo = 1")
  qtde_arrays = int(input('Insira a quantidade de vetores: '))

#OPCAO 1
if qtde_arrays == 1:
  for i in range(2):
    n1 = float(input('Insira os numeros que vão entrar no Vetor 1\n'))
    v1.append(n1)

  vet_det = np.array([v1])
  Va = [int(x)for x in v1]
  L = [Matrix([Va])]
  baseOrto = GramSchmidt(L)
  for i in baseOrto:
    print(i)


  #print(vet_det)              # o vetor w1 = v1

  
# OPÇÃO 2
elif qtde_arrays == 2:
  for i in range(qtde_arrays):
    n1 = float(input('Insira os numeros que vão entrar no Vetor 1\n'))
    v1.append(n1)
  for i in range(qtde_arrays):
    n2 = float(input('Insira os numeros que vão entrar no vetor 2\n'))
    v2.append(n2)

  #insere nos vetor 
  
  vet_det = np.array([v1,           #vet_det e uma matriz dos vetores dados
                      v2])
  print(vet_det)

  det = np.linalg.det(vet_det)  # acha o determinante da matriz vet_det 

  print(det)
  if(det != 0):
    print("È linearmente independente")
    Va = [int(x)for x in v1]             #Va e Vb sao os vetores v1 e v2 tranformdados em inteiro, fiz isso para no print aparecer a formataçao 3/2 em vez de 1,5  mas nao funcionou!!!!
    Vb = [int(x)for x in v2]            
    L = [Matrix([Va]),Matrix([Vb])]
    print(L)
    baseOrto = GramSchmidt(L)

    for i in baseOrto:
      print("w",i)
      
      print("")
  else:
    print("OS vetores são linearmente dependentes")
  

# OPÇÃO 3
elif qtde_arrays == 3:
  for i in range(qtde_arrays):
    n1 = float(input('Insira os numeros que vão entrar no Vetor 1\n'))
    v1.append(n1)

  for i in range(qtde_arrays):
    n2 = float(input('Insira os numeros que vão entrar no vetor 2\n'))
    v2.append(n2)

  for i in range(qtde_arrays):
    n3 = float(input('Insira os numeros que vão entrar no vetor 3\n'))
    v3.append(n3)

  #insere vetores dentro de um vetor = MATRIZ

  vet_det = np.array([v1,v2,v3])
  print(vet_det)
  det = np.linalg.det(vet_det)
  print(det)
  if(det != 0):
    print("È linearmente independente")
    Va = [int(x)for x in v1]
    Vb = [int(x)for x in v2]
    Vc = [int(x)for x in v3]

    L = [Matrix([Va]), Matrix([Vb]), Matrix([Vc])]

    baseOrto = GramSchmidt(L)
    for i in baseOrto:
      print(i)
    
      print("")

  else:
    print("OS vetores são linearmente dependentes")


# OPCAO 4
elif qtde_arrays == 4:
  for i in range(qtde_arrays):
    n1 = float(input('Insira os numeros que vão entrar no Vetor 1\n'))
    v1.append(n1)

  for i in range(qtde_arrays):
    n2 = float(input('Insira os numeros que vão entrar no vetor 2\n'))
    v2.append(n2)

  for i in range(qtde_arrays):
    n3 = float(input('Insira os numeros que vão entrar no vetor 3\n'))
    v3.append(n3)

  for i in range(qtde_arrays):
    n4 = float(input('Insira os numeros que vão entrar no vetor 4\n'))
    v4.append(n4)

  #insere nos vetor 
  vet_det = np.array([v1,v2,v3,v4])
  print(vet_det)
  det = np.linalg.det(vet_det)
  print(det)
  if(det != 0):
    print("È linearmente independente")
    Va = [int(x)for x in v1]
    Vb = [int(x)for x in v2]
    Vc = [int(x)for x in v3]
    Vd = [int(x)for x in v4]

    L = [Matrix([Va]), Matrix([Vb]), Matrix([Vc]), Matrix([Vd])]

    baseOrto = GramSchmidt(L)
    for i in baseOrto:
      print(i)
    
      print("")

  else:
    print("OS vetores são linearmente dependentes")



# OPCÂO 5
elif qtde_arrays == 5:
  for i in range(qtde_arrays):
    n1 = float(input('Insira os numeros que vão entrar no Vetor 1\n'))
    v1.append(n1)

  for i in range(qtde_arrays):
    n2 = float(input('Insira os numeros que vão entrar no vetor 2\n'))
    v2.append(n2)

  for i in range(qtde_arrays):
    n3 = float(input('Insira os numeros que vão entrar no vetor 3\n'))
    v3.append(n3)

  for i in range(qtde_arrays):
    n4 = float(input('Insira os numeros que vão entrar no vetor 4\n'))
    v4.append(n4)
      
  for i in range(qtde_arrays):
    n5 = float(input('Insira os numeros que vão entrar no vetor 5\n'))
    v5.append(n5)

#----------------

  vet_det = np.array([v1,v2,v3,v4,v5])
  print(vet_det)
  det = np.linalg.det(vet_det)
  print("DETERMINANTE =", det)
  if(det != 0):
    print("È linearmente independente")
    Va = [int(x)for x in v1]
    Vb = [int(x)for x in v2]
    Vc = [int(x)for x in v3]
    Vd = [int(x)for x in v4]
    Ve = [int(x)for x in v5]

    L = [Matrix([Va]), Matrix([Vb]), Matrix([Vc]), Matrix([Vd]), Matrix([Ve])]

    baseOrto = GramSchmidt(L)
    for i in baseOrto:
      print(i)
  
      print("")

  else:
    print("OS vetores são linearmente dependentes")

